{"version":3,"sources":["Card.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","mode","src","cmplogo","alt","title","href","cmpsite","target","rel","type","id","created","url","location","App","useState","jobs","setJobs","search","setSearch","query","setQuery","JSON","parse","localStorage","getItem","darkmode","setDarkmode","useEffect","getJobs","setItem","stringify","a","fetch","response","json","data","onSubmit","e","preventDefault","value","placeholder","onChange","checked","map","val","index","company_logo","created_at","company_url","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAqBeA,EAlBF,SAACC,GACV,OACA,mCACA,qBAAKC,UAAU,YAAf,SACA,sBAAKA,UAAWD,EAAME,KAAO,sBAAwB,OAArD,UACQ,qBAAKC,IAAKH,EAAMI,QAASC,IAAI,WACjC,sBAAKJ,UAAU,YAAf,UACI,6BAAI,2CAAcD,EAAMM,WACxB,gDAAkB,mBAAGC,KAAMP,EAAMQ,QAASC,OAAO,SAASC,IAAI,aAA5C,SAA0DV,EAAMQ,aAClF,2CAAcR,EAAMW,QACpB,oBAAGC,GAAG,OAAN,yBAA0BZ,EAAMa,WAAY,mBAAGN,KAAMP,EAAMc,IAAKL,OAAO,SAASC,IAAI,aAAxC,wBAC5C,+CAAkBV,EAAMe,uBCgErBC,MA1Ef,WAEE,IAFa,EAMWC,mBAAS,IANpB,mBAMNC,EANM,KAMAC,EANA,OAOeF,mBAAS,IAPxB,mBAONG,EAPM,KAOEC,EAPF,OAQaJ,mBAAS,IARtB,mBAQNK,EARM,KAQCC,EARD,OASmBN,oBAPhB,WACd,OAAOO,KAAKC,MAAMC,aAAaC,QAAQ,WAAY,KAHxC,mBASNC,EATM,KASIC,EATJ,KAWbC,qBAAU,WACRC,IACAL,aAAaM,QAAQ,OAAQR,KAAKS,UAAUL,MAC3C,CAACN,EAAOM,IAEX,IAAMG,EAAO,uCAAG,gCAAAG,EAAA,6DACRpB,EADQ,gGACuFQ,GADvF,SAESa,MAAMrB,GAFf,cAERsB,EAFQ,gBAGKA,EAASC,OAHd,OAGRC,EAHQ,OAIdnB,EAAQmB,GAJM,2CAAH,qDASb,OACE,mCACE,sBAAKrC,UAAW2B,EAAW,gBAAkB,MAA7C,UACE,sBAAK3B,UAAU,MAAf,UACE,qBAAKA,UAAU,aAAf,SACF,uBACEsC,SAAU,SAACC,GACTA,EAAEC,iBACFlB,EAASH,GACTC,EAAU,KAJd,UAOE,uBACEV,KAAK,OACL+B,MAAOtB,EACPuB,YAAY,cACZC,SAAU,SAACJ,GACTnB,EAAUmB,EAAE/B,OAAOiC,UAIvB,wBAAQzC,UAAU,aAAaU,KAAK,gBAGtC,wBAAOV,UAAU,SAAjB,UACA,uBAAOU,KAAK,WAAWkC,QAASjB,EAAUgB,SAAU,WAAOf,GAAaD,MACxE,sBAAM3B,UAAU,uBAGfiB,EAAK4B,KAAI,SAACC,EAAKC,GACd,OACE,cAAC,EAAD,CAEE1C,MAAOyC,EAAIzC,MACXF,QAAS2C,EAAIE,aACbtC,KAAMoC,EAAIpC,KACVI,SAAUgC,EAAIhC,SACdF,QAASkC,EAAIG,WACb1C,QAASuC,EAAII,YACbrC,IAAKiC,EAAIjC,IACTZ,KAAM0B,GARDoB,YCjDJI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.13ea0214.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css'\r\n\r\nconst Card = (props) => {\r\n    return(\r\n    <>\r\n    <div className=\"main-card\">\r\n    <div className={props.mode ? \"card dark-mode-card\" : \"card\"}>\r\n            <img src={props.cmplogo} alt=\"Avatar\"/>\r\n        <div className=\"container\">\r\n            <h4><b>Job post: {props.title}</b></h4>\r\n            <p>Visit website: <a href={props.cmpsite} target=\"_blank\" rel=\"noreferrer\">{props.cmpsite}</a></p>\r\n            <p>Job type: {props.type}</p>\r\n            <p id=\"desc\">Created at: {props.created}</p><a href={props.url} target=\"_blank\" rel=\"noreferrer\">Apply here</a>\r\n            <p>Job location: {props.location}</p>\r\n        </div>\r\n    </div>\r\n    </div>\r\n    </>\r\n    );\r\n}\r\nexport default Card;","import React, { useEffect, useState } from \"react\";\nimport Card from \"./Card\";\nimport \"./App.css\";\n\nfunction App() {\n\n  const getMode = () => {\n    return JSON.parse(localStorage.getItem(\"mode\")) || false;\n  }\n\n  const [jobs, setJobs] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [darkmode, setDarkmode] = useState(getMode);\n\n  useEffect(() => {\n    getJobs();\n    localStorage.setItem(\"mode\", JSON.stringify(darkmode));\n  }, [query, darkmode]);\n\n  const getJobs = async () => {\n    const url = `https://api.allorigins.win/raw?url=https://jobs.github.com/positions.json?description=${query}`;\n    const response = await fetch(url);\n    const data = await response.json();\n    setJobs(data);\n    // console.log(jobs);\n  };\n  \n\n  return (\n    <>\n      <div className={darkmode ? \"App dark-mode\" : \"App\"}>\n        <div className=\"nav\">\n          <div className=\"search-bar\">\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            setQuery(search);\n            setSearch('');\n          }}\n        >\n          <input\n            type=\"text\"\n            value={search}\n            placeholder=\"search jobs\"\n            onChange={(e) => {\n              setSearch(e.target.value);\n              // console.log(search);\n            }}\n          />\n          <button className=\"btn-search\" type=\"submit\"></button>\n        </form>\n        </div>\n        <label className=\"switch\">\n        <input type=\"checkbox\" checked={darkmode} onChange={() => {setDarkmode(!darkmode)}}/>\n        <span className=\"slider round\"></span>\n        </label>\n        </div>\n        {jobs.map((val, index) => {\n          return (\n            <Card\n              key={index}\n              title={val.title}\n              cmplogo={val.company_logo}\n              type={val.type}\n              location={val.location}\n              created={val.created_at}\n              cmpsite={val.company_url}\n              url={val.url}\n              mode={darkmode}\n            />\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}